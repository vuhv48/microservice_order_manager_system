package com.e_commercy.order.service;

import com.e_commercy.order.model.Order;
import com.e_commercy.order.model.OrderItem;
import com.e_commercy.order.model.enumeration.OrderStatus;
import com.e_commercy.order.repository.OrderItemRepository;
import com.e_commercy.order.repository.OrderRepository;
import com.e_commercy.order.viewmodel.order.OrderItemVm;
import com.e_commercy.order.viewmodel.order.OrderPostVm;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.e_commercy.order.viewmodel.order.OrderVm;
import org.springframework.transaction.annotation.Transactional;

import java.util.Set;
import java.util.stream.Collectors;

@Service
@Transactional
@RequiredArgsConstructor
public class OrderService {

	@Autowired
	private final OrderRepository orderRepository;

	@Autowired
	private final OrderItemRepository orderItemRepository;
	
	public OrderVm createOrder(OrderPostVm orderPostVm) {
		Order order = Order.builder()
				.customerId(orderPostVm.customerId())
				.totalPrice(orderPostVm.totalPrice())
				.deliveryFee((orderPostVm.deliveryFee()))
				.shippingAddress(orderPostVm.shippingAddress())
				.billingAddress(orderPostVm.billingAddress())
				.orderStatus(OrderStatus.PENDING)
				.build();
		orderRepository.save(order);

		Set<OrderItem> orderItems = orderPostVm.orderItemPostVms().stream()
				.map(item -> OrderItem.builder()
						.productId(item.productId())
						.productName(item.productName())
						.quantity((item.quantity()))
						.productPrice(item.productPrice())
						.id(order.getId())
						.build()
				).collect(Collectors.toSet());
		orderItemRepository.saveAll(orderItems);

        return OrderVm.fromModel(order, orderItems);
	}

	public
}
